Логика работы (Техническое задание)

1. Интерфейс пользователя

Drag‑n‑Drop или выбор через диалог файловой системы:

Выпадающее поле для выбора папки или перетаскивания набора WAV и PNG.

Поддержка множественного выбора: можно перетянуть сразу файлы из разных директорий.

Предпросмотр найденных пар:

На экране отображается таблица с колонками: Artist, Title, Cover (PNG), Audio (WAV).

Скрипт автоматически группирует файлы по совпадающим базовым именам (без расширений).

Для каждой группы показывается статус: ✅ пара найдена, ⚠️ отсутствует файл, ❌ нечёткий матч.

Редактирование маппинга прямо в UI:

Если в имени файла неизвестный артист, пользователь может выбрать из списка API или ввести вручную и сохранить в конфиг.

Аналогично для выбора лейбла и жанра (выпадающие селекты).

2. Конфигурация и хранение настроек

Конфиг-файл (config.yaml или .env):

auth_token: "<твой_token>"
default_label_id: 41605
default_genre_id: 196
platform_ids: [195, 196, 197]

# Маппинг артистов: ключ — имя исполнителя
artists:
  "Artist One": 58251
  "Artist Two": 58252

Динамическое обновление маппинга из UI: добавленные через интерфейс артисты автоматически сохраняются в config.yaml.

3. Бизнес-логика автоматизации

Загрузка списка файлов из UI → набор групп (релизов).

Для каждой группы (release):

Создание черновика (POST /releases/create).

Обновление метаданных (PUT /releases/{id}):

title = Title из имени файла

client.id = artists[Artist] из конфига

releaseDate и originalReleaseDate = даты из формы запуска

labelId, genreId, platformIds — значения по умолчанию или из UI

Загрузка обложки (POST /releases/{id}/cover) — PNG-файл из группы.

Загрузка аудио (POST /releases/{id}/tracks/upload) — WAV-файл.

Обновление метаданных трека (PUT /tracks/{trackId}):

recordingYear, language, composers, lyricists — значения из UI или конфига.

Выбор платформ (PUT /releases/{id}/platforms).

Логирование результата: вывод в UI таблички со статусом (успех/ошибка) и ссылками на релизы.

4. Поддержка разных артистов и директорий

Нет жёсткого ожидания папок — UI даёт свободу выбора любых директорий.

Артисты: можно грузить сразу релизы для разных артистов — группы автоматически содержат Artist в имени.

Ошибки соответствия: если для группы не найден корректный маппинг, UI подсказывает добавить или выбрать вручную.

5. Режимы работы и расширяемость

Dry‑run: режим, когда запросы не отправляются, но показывается, что и куда бы отправилось.

Параллельная обработка: через параметр --concurrency, чтобы ускорить пакетную загрузку.

Сохранение логов: подробные логи в файл upload.log + экспорт отчёта CSV/Excel прямо из UI.

Безопасность: токен хранится локально (не в коде), при необходимости — шифруется .env и защищён паролем.

Такой подход обеспечит удобный визуальный контроль, гибкую работу с любыми папками и надёжную автоматизацию сотен релизов.